Updated Folder Structure Following Best Practices

For better scalability and maintainability, here's the updated folder structure for the FastAPI project:

fastapi-project/
├── app/
│   ├── api/
│   │   ├── __init__.py
│   │   ├── routes.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py
│   ├── tests/
│   │   ├── __init__.py
│   │   ├── test_routes.py
│   ├── __init__.py
│   ├── main.py
├── docker/
│   ├── Dockerfile
├── tests/
│   ├── __init__.py
│   ├── postman_collection.json
├── .gitlab-ci.yml
├── Makefile
├── requirements.txt
└── README.md


---

Purpose of Each Directory/File

1. app/

Main Application Logic:

api/routes.py: Contains all the API route definitions.

core/config.py: Centralized configuration for app settings (e.g., environment variables).

main.py: Entry point for the FastAPI app.



2. app/tests/

Unit and Integration Tests:

Organize tests logically (e.g., tests for routes, services, etc.).



3. docker/

Docker-Specific Files:

Dockerfile: Contains instructions to build the Docker image.



4. tests/

Postman and API Testing:

postman_collection.json: Stores Postman API test collection.




---

Updated File Content

app/api/routes.py

from fastapi import APIRouter

router = APIRouter()

@router.get("/")
async def read_root():
    return {"message": "Hello, World!"}

app/core/config.py

class Config:
    APP_NAME = "FastAPI Demo"
    VERSION = "1.0.0"

config = Config()

app/main.py

from fastapi import FastAPI
from app.api.routes import router
from app.core.config import config

app = FastAPI(title=config.APP_NAME, version=config.VERSION)
app.include_router(router)

app/tests/test_routes.py

from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Hello, World!"}


---

Updated .gitlab-ci.yml

stages:
  - lint
  - test
  - deploy

variables:
  DOCKER_IMAGE: fastapi-app

before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt

lint:
  stage: lint
  script:
    - make lint
  allow_failure: false

lint-fix:
  stage: lint
  script:
    - make lint-fix

unit-test:
  stage: test
  script:
    - make test
  artifacts:
    paths:
      - coverage.xml

postman-api-test:
  stage: test
  image: postman/newman:alpine
  script:
    - newman run tests/postman_collection.json --reporters cli,junit --reporter-junit-export junit-report.xml
  artifacts:
    paths:
      - junit-report.xml

docker-deploy:
  stage: deploy
  script:
    - make docker-build
    - make docker-run

clean:
  stage: deploy
  script:
    - make clean
    - make docker-clean


---

Updated Makefile

install:
	pip install -r requirements.txt

lint:
	flake8 app/
	black

