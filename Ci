Here is a basic Postman collection JSON file for testing your FastAPI application. It includes a test for the GET / endpoint. Save this content as postman_collection.json in the tests/ folder.


---

postman_collection.json

{
  "info": {
    "name": "FastAPI Project",
    "_postman_id": "12345678-abcd-efgh-ijkl-1234567890ab",
    "description": "Collection for testing FastAPI endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET /",
      "request": {
        "method": "GET",
        "header": [],
        "body": null,
        "url": {
          "raw": "http://localhost:8000/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": [""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Check status code",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Validate response body",
              "pm.test(\"Response body contains correct message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.eql(\"Hello, World!\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}


---

How to Use This Collection

1. Import the Collection into Postman

Open Postman.

Go to File > Import.

Select the postman_collection.json file.

The collection will appear under Collections in Postman.


2. Run the Collection Locally

Start your FastAPI app using:

make run

Run the GET / request in Postman to test the root endpoint.


3. Integrate with Newman

Install Newman globally:

npm install -g newman

Run the collection from the command line (as used in .gitlab-ci.yml):

newman run tests/postman_collection.json



---

Postman Collection Features

GET / Endpoint:

Validates the response status code (200).

Checks the message in the response body ("Hello, World!").



Feel free to extend the collection as you add more endpoints to your FastAPI app! Let me know if you'd like help creating tests for additional routes.

