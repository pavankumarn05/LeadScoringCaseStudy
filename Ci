Here is a basic Postman collection JSON file for testing your FastAPI application. It includes a test for the GET / endpoint. Save this content as postman_collection.json in the tests/ folder.


---

postman_collection.json

{
  "info": {
    "name": "FastAPI Project",
    "_postman_id": "12345678-abcd-efgh-ijkl-1234567890ab",
    "description": "Collection for testing FastAPI endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET /",
      "request": {
        "method": "GET",
        "header": [],
        "body": null,
        "url": {
          "raw": "http://localhost:8000/",
          "protocol": "http",
          "host": ["localhost"],
          "port": "8000",
          "path": [""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Check status code",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Validate response body",
              "pm.test(\"Response body contains correct message\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.eql(\"Hello, World!\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}


---

How to Use This Collection

1. Import the Collection into Postman

Open Postman.

Go to File > Import.

Select the postman_collection.json file.

The collection will appear under Collections in Postman.


2. Run the Collection Locally

Start your FastAPI app using:

make run

Run the GET / request in Postman to test the root endpoint.


3. Integrate with Newman

Install Newman globally:

npm install -g newman

Run the collection from the command line (as used in .gitlab-ci.yml):

newman run tests/postman_collection.json



---

Postman Collection Features

GET / Endpoint:

Validates the response status code (200).

Checks the message in the response body ("Hello, World!").



Feel free to extend the collection as you add more endpoints to your FastAPI app! Let me know if you'd like help creating tests for additional routes.


hhhhhhh

To execute local tests without installing Python, Postman, or other dependencies on your machine, you can utilize Docker containers. Docker will provide an isolated environment for running your tests, making it unnecessary to install additional software locally. Here's how you can set this up:


---

Step-by-Step Guide to Running Local Tests via Docker


---

1. Use Docker for Python Dependencies

a. Prepare the Python Environment in Docker

Create a Dockerfile in the root of your project to define the Python environment needed for testing and running your app:

Dockerfile for Python Tests

FROM python:3.10-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the current directory's content into the container
COPY . .

# Install required Python packages
RUN pip install --no-cache-dir -r requirements.txt

# Install testing tools for linting and testing
RUN pip install black flake8 pytest pytest-cov

# Set default command to bash (optional)
CMD ["bash"]


---

2. Build the Docker Image for Python Testing

Run this command in your terminal to build the Docker image:

docker build -t fastapi-test-env -f Dockerfile .


---

3. Run Tests and Linting Inside Docker

a. Run Linting (Black and Flake8)

Use the Docker container to perform linting:

docker run --rm -v $(pwd):/app fastapi-test-env black . --check
docker run --rm -v $(pwd):/app fastapi-test-env flake8 .

b. Run Unit Tests

Execute unit tests with coverage using pytest:

docker run --rm -v $(pwd):/app fastapi-test-env pytest --cov=app


---

4. Use Docker for Postman Collection Testing

a. Prepare a Newman Docker Container

Newman, the CLI tool for running Postman collections, has an official Docker image. You can use it without installing Newman locally.

b. Run Newman in Docker

Run the Postman collection using the Newman Docker image:

docker run --rm -v $(pwd)/tests:/etc/newman postman/newman run /etc/newman/postman_collection.json

This command mounts your local tests directory (where the postman_collection.json is located) into the container.


---

5. Run the FastAPI Application in Docker

a. Use the Application Dockerfile

If youâ€™ve already created a Dockerfile for running the FastAPI app, you can start it using the following commands.

b. Build and Run the Docker Container

1. Build the Docker image:

docker build -t fastapi-app .


2. Run the FastAPI container:

docker run -d -p 8000:8000 fastapi-app

The app will now be accessible at http://localhost:8000.




---

6. Automate All Steps Using Docker Compose

To simplify these processes, create a docker-compose.yml file to manage multiple services (e.g., app, tests, linting):

docker-compose.yml

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  lint:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    command: black . --check

  test:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    command: pytest --cov=app

  postman:
    image: postman/newman
    volumes:
      - ./tests:/etc/newman
    command: run /etc/newman/postman_collection.json


---

7. Execute All Tasks Using Docker Compose

Run the following commands:

Start the App:

docker-compose up app

Run Linting:

docker-compose run lint

Run Unit Tests:

docker-compose run test

Run Postman Collection:

docker-compose run postman



---

Benefits of This Approach

1. Minimal Local Installation:

You only need Docker installed on your machine.

All dependencies are isolated inside containers.



2. Reproducibility:

Docker ensures consistent environments across development, testing, and deployment.



3. Scalability:

Easily extend this setup for additional tests or services.




Let me know if you encounter any issues!

